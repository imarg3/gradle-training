1. Which goal(s) are cacheable but are still executed instead of being resolved from the cache?

  The (surefire) test goal is cacheable, but experienced a cache miss.

2. Which inputs are impacting goal cacheability?

  Starting with this comparison of the two examples: https://go.gradle.com/wb-ch5-m3 you will see a timestamp is affecting the goal inputs.

3. How would you fix the timestamp problem?

  You don't really need that logic so remove it from the buildScanUserData.groovy file.

  For volatility that you can't just remove, use normalization as specified in the Maven Extension documentation: https://docs.gradle.com/enterprise/maven-extension/#normalization

4. Are all cacheable goals being resolved from the cache or does some volatility remain?

  Yes, the volatility is gone and all the cacheable goals now come from the cache.

5. Are the avoidance savings for these builds better or worse than the builds that included
  timestamp files?

  The avoidance savings is better for the fully cached build: 0.459s to 0.863s for the examples.
